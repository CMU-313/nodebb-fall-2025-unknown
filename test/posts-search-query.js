'use strict';

const assert = require('assert');

const db = require('./mocks/databasemock');
const posts = require('../src/posts');
const user = require('../src/user');
const topics = require('../src/topics');
const categories = require('../src/categories');

// generated by Claude Sonnet 4
describe('Posts.getPostsByTitleKeywords', function () {
	let testUser;
	let testCategory;
	const testTopics = [];
    
	before(async function () {
		console.log('Setting up test data for keyword search');
        
		const testUserUid = await user.create({
			username: 'keywordtestuser',
			email: 'keywordtest@example.com',
			password: 'testpass',
		});
		testUser = { uid: testUserUid };
        
		testCategory = await categories.create({
			name: 'Test Category for Keywords',
			description: 'Test category for keyword testing',
		});
        
		const privileges = require('../src/privileges');
		await privileges.categories.give(['topics:read', 'read'], testCategory.cid, 'registered-users');
        
		const groups = require('../src/groups');
		await groups.join('registered-users', testUser.uid);
        
		// Create test topics with different titles
		const topicTitles = [
			'JavaScript Programming Tutorial',
			'NodeJS Backend Development',
			'React Frontend Framework',
			'Python Data Science',
			'Machine Learning with JavaScript',
			'Database Design Principles',
			'Web Development Best Practices',
		];
		
		for (const title of topicTitles) {
			// eslint-disable-next-line no-await-in-loop
			const topicData = await topics.post({
				uid: testUser.uid,
				cid: testCategory.cid,
				title: title,
				content: `This is a test topic about ${title}`,
			});
			testTopics.push(topicData);
		}
	});
    
	after(async function () {
		console.log('Cleaning up test data');
        
		for (const topic of testTopics) {
			// eslint-disable-next-line no-await-in-loop
			await topics.delete(topic.topicData.tid);
		}
        
		await categories.purge(testCategory.cid);
	});
    
	describe('Single keyword search', function () {
		it('should return posts from topics containing a single keyword', async function () {
			console.log('Available posts functions:', Object.getOwnPropertyNames(posts).filter(name => name.includes('Title') || name.includes('Keyword')));
			const result = await posts.getPostsByTitleKeywords(testUser.uid, 'JavaScript', 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length >= 2, 'Should return at least 2 posts with JavaScript in title');
			
			// Check that all returned posts are from topics with 'JavaScript' in the title
			for (const post of result) {
				assert(post.topic && post.topic.title, 'Post should have topic with title');
				assert(post.topic.title.toLowerCase().includes('javascript'), 
					'Topic title should contain JavaScript');
			}
			console.log('Test passed: single keyword search works');
		});
		
		it('should be case-insensitive', async function () {
			const result = await posts.getPostsByTitleKeywords(testUser.uid, 'javascript', 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length >= 2, 'Should return at least 2 posts with javascript in title');
			console.log('Test passed: search is case-insensitive');
		});
		
		it('should return empty array when no matches found', async function () {
			const result = await posts.getPostsByTitleKeywords(testUser.uid, 'Nonexistent', 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length === 0, 'Should return empty array when no matches');
			console.log('Test passed: returns empty array for no matches');
		});
	});
	
	describe('Multiple keywords search', function () {
		it('should handle string with multiple keywords', async function () {
			const result = await posts.getPostsByTitleKeywords(testUser.uid, 'JavaScript React', 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length >= 3, 'Should return posts from topics with JavaScript OR React');
			
			// Check that all returned posts contain either JavaScript or React
			for (const post of result) {
				const title = post.topic.title.toLowerCase();
				assert(title.includes('javascript') || title.includes('react'), 
					'Topic title should contain JavaScript or React');
			}
			console.log('Test passed: multiple keywords as string works');
		});
		
		it('should handle array of keywords', async function () {
			const result = await posts.getPostsByTitleKeywords(testUser.uid, ['Python', 'NodeJS'], 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length >= 2, 'Should return posts from topics with Python OR NodeJS');
			
			// Check that all returned posts contain either Python or NodeJS
			for (const post of result) {
				const title = post.topic.title.toLowerCase();
				assert(title.includes('python') || title.includes('nodejs'), 
					'Topic title should contain Python or NodeJS');
			}
			console.log('Test passed: array of keywords works');
		});
		
		it('should handle mixed case keywords in array', async function () {
			const result = await posts.getPostsByTitleKeywords(testUser.uid, ['PYTHON', 'nodejs'], 0, 10);
			
			assert(Array.isArray(result), 'Result should be an array');
			assert(result.length >= 2, 'Should return posts regardless of keyword case');
			console.log('Test passed: mixed case keywords work');
		});
	});
	
	describe('Error handling', function () {
		it('should throw error for null/undefined keywords', async function () {
			try {
				await posts.getPostsByTitleKeywords(testUser.uid, null, 0, 10);
				assert.fail('Should have thrown an error');
			} catch (error) {
				assert(error.message.includes('invalid-keyword'), 'Should throw invalid keyword error');
			}
			console.log('Test passed: throws error for null keywords');
		});
		
		it('should throw error for empty string', async function () {
			try {
				await posts.getPostsByTitleKeywords(testUser.uid, '', 0, 10);
				assert.fail('Should have thrown an error');
			} catch (error) {
				assert(error.message.includes('invalid-keyword'), 'Should throw invalid keyword error');
			}
			console.log('Test passed: throws error for empty string');
		});
		
		it('should throw error for empty array', async function () {
			try {
				await posts.getPostsByTitleKeywords(testUser.uid, [], 0, 10);
				assert.fail('Should have thrown an error');
			} catch (error) {
				assert(error.message.includes('invalid-keyword'), 'Should throw invalid keyword error');
			}
			console.log('Test passed: throws error for empty array');
		});
		
		it('should throw error for invalid input type', async function () {
			try {
				await posts.getPostsByTitleKeywords(testUser.uid, 123, 0, 10);
				assert.fail('Should have thrown an error');
			} catch (error) {
				assert(error.message.includes('invalid-keyword'), 'Should throw invalid keyword error');
			}
			console.log('Test passed: throws error for invalid input type');
		});
	});
	
	describe('Pagination', function () {
		it('should respect pagination parameters', async function () {
			const result1 = await posts.getPostsByTitleKeywords(testUser.uid, 'Development', 0, 1);
			const result2 = await posts.getPostsByTitleKeywords(testUser.uid, 'Development', 0, 5);
			
			assert(Array.isArray(result1), 'Result1 should be an array');
			assert(Array.isArray(result2), 'Result2 should be an array');
			assert(result2.length >= result1.length, 'Larger stop should return more or equal results');
			console.log('Test passed: pagination works correctly');
		});
	});
});
