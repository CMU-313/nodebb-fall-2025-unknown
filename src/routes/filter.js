'use strict';
//This route file was generated by ChatGPT upon request.

const posts = require('../posts');
const topics = require('../topics');
const helpers = require('./helpers');

module.exports.init = function (router, middleware) {
	router.get('/filter', middleware.buildHeader, async (req, res) => {
		res.render('filter', {});
	});

	router.get('/api/filter/posts', middleware.authenticateRequest, helpers.tryRoute(async (req, res) => {
		const uid = req.uid || 0;

		const startParam = req.query.start;
		const endParam = req.query.end;
		const startIndex = Math.max(0, parseInt(req.query.startIndex, 10) || 0);
		const stopIndex = Math.max(startIndex, parseInt(req.query.stopIndex, 10) || (startIndex + 19));
		const cid = req.query.cid ? parseInt(req.query.cid, 10) : -1;

		try {
			const postSummaries = await posts.getPostsByTimeRange(uid, startParam, endParam, startIndex, stopIndex, cid);
			
			const tids = [...new Set(postSummaries.map(post => post.topic && post.topic.tid).filter(Boolean))];
			
			if (!tids.length) {
				return res.json({ topics: [], topicCount: 0 });
			}

			const topicsData = await topics.getTopicsByTids(tids, { uid: uid });
			
			topics.calculateTopicIndices(topicsData, startIndex);

			res.json({ topics: topicsData, topicCount: topicsData.length });
		} catch (error) {
			let errorMessage = 'An error occurred while filtering posts.';
			
			if (error.message === '[[error:invalid-date-format]]') {
				errorMessage = 'Invalid date format. Please select valid dates.';
			} else if (error.message === '[[error:invalid-time-format]]') {
				errorMessage = 'Invalid time format. Please select valid dates.';
			} else if (error.message === '[[error:invalid-time-range]]') {
				errorMessage = 'Invalid date range. The start date must be before the end date.';
			}
			
			return res.status(400).json({ error: errorMessage });
		}
	}));
};
